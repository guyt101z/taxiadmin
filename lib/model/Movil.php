<?php

/**
 * Skeleton subclass for representing a row from the 'movil' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Mon May 21 15:54:43 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Movil extends BaseMovil {

    /**
     * Initializes internal state of Movil object.
     * @see        parent::__construct()
     */
    public function __construct() {
        // Make sure that parent constructor is always invoked, since that
        // is where any default values for this object are set.
        parent::__construct();
    }

    public function getEmpresa() {
        $empresa = NULL;
        foreach ($this->getMovilEmpresas() as $movilEmpresa) {
//            if ($movilEmpresa->getHabilitado() == TRUE) {
            $empresa = $movilEmpresa->getEmpresa();
//            }
        }
        return $empresa;
    }

    public function __toString() {
        return $this->getMatricula();
    }

    public function getMultas($criteria = null, PropelPDO $con = null) {
        if (!$criteria) {
            $criteria = new Criteria();
            $criteria->add(MultaPeer::HABILITADO, TRUE);
        }

        return parent::getMultas($criteria);
    }

    public function getAccidentes($criteria = null, PropelPDO $con = null) {
        if (!$criteria) {
            $criteria = new Criteria();
            $criteria->add(AccidentePeer::HABILITADO, TRUE);
        }

        return parent::getAccidentes($criteria);
    }

    public function getTrabajosTaller($criteria = null, PropelPDO $con = null) {
        if (!$criteria) {
            $criteria = new Criteria();
            $criteria->add(TrabajotallerPeer::HABILITADO, TRUE);
        }

        return parent::getTrabajotallers($criteria);
    }

    public function getRecaudaciones($criteria = null, PropelPDO $con = null) {
        if (!$criteria) {
            $criteria = new Criteria();
            $criteria->add(RecaudacionPeer::HABILITADO, TRUE);
        }

        return parent::getRecaudacions($criteria);
    }

    public function getUltimasRecaudaciones($criteria = null, PropelPDO $con = null) {
        if (!$criteria) {
            $criteria = new Criteria();
            $criteria->setLimit(6);
            $criteria->add(RecaudacionPeer::HABILITADO, TRUE);
            $criteria->addDescendingOrderByColumn(RecaudacionPeer::FECHA);
        }

        return parent::getRecaudacions($criteria);
    }

    public function getGastos($criteria = null, PropelPDO $con = null) {
        if (!$criteria) {
            $criteria = new Criteria();
            $criteria->add(GastomovilPeer::HABILITADO, TRUE);
        }

        return parent::getGastomovils($criteria);
    }

}

// Movil

<?php

/**
 * Base class that represents a row from the 'chofer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun May 26 12:23:23 2013
 *
 * @package    lib.model.om
 */
abstract class BaseChofer extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ChoferPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the cedula field.
	 * @var        int
	 */
	protected $cedula;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the apellidos field.
	 * @var        string
	 */
	protected $apellidos;

	/**
	 * The value for the direccion field.
	 * @var        string
	 */
	protected $direccion;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the vencimientolibretaconducir field.
	 * @var        string
	 */
	protected $vencimientolibretaconducir;

	/**
	 * The value for the vencimientocarnesalud field.
	 * @var        string
	 */
	protected $vencimientocarnesalud;

	/**
	 * The value for the fechaalta field.
	 * @var        string
	 */
	protected $fechaalta;

	/**
	 * The value for the fechabaja field.
	 * @var        string
	 */
	protected $fechabaja;

	/**
	 * The value for the habilitado field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $habilitado;

	/**
	 * The value for the usuario field.
	 * @var        int
	 */
	protected $usuario;

	/**
	 * @var        Usuario
	 */
	protected $aUsuarioRelatedByUsuario;

	/**
	 * @var        array Multa[] Collection to store aggregation of Multa objects.
	 */
	protected $collMultas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMultas.
	 */
	private $lastMultaCriteria = null;

	/**
	 * @var        array Accidente[] Collection to store aggregation of Accidente objects.
	 */
	protected $collAccidentes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAccidentes.
	 */
	private $lastAccidenteCriteria = null;

	/**
	 * @var        array Recaudacion[] Collection to store aggregation of Recaudacion objects.
	 */
	protected $collRecaudacions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRecaudacions.
	 */
	private $lastRecaudacionCriteria = null;

	/**
	 * @var        array Adelanto[] Collection to store aggregation of Adelanto objects.
	 */
	protected $collAdelantos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAdelantos.
	 */
	private $lastAdelantoCriteria = null;

	/**
	 * @var        array ChoferEmpresa[] Collection to store aggregation of ChoferEmpresa objects.
	 */
	protected $collChoferEmpresas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collChoferEmpresas.
	 */
	private $lastChoferEmpresaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ChoferPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->habilitado = true;
	}

	/**
	 * Initializes internal state of BaseChofer object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [cedula] column value.
	 * 
	 * @return     int
	 */
	public function getCedula()
	{
		return $this->cedula;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [apellidos] column value.
	 * 
	 * @return     string
	 */
	public function getApellidos()
	{
		return $this->apellidos;
	}

	/**
	 * Get the [direccion] column value.
	 * 
	 * @return     string
	 */
	public function getDireccion()
	{
		return $this->direccion;
	}

	/**
	 * Get the [telefono] column value.
	 * 
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [optionally formatted] temporal [vencimientolibretaconducir] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getVencimientolibretaconducir($format = 'Y-m-d')
	{
		if ($this->vencimientolibretaconducir === null) {
			return null;
		}


		if ($this->vencimientolibretaconducir === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->vencimientolibretaconducir);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->vencimientolibretaconducir, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [vencimientocarnesalud] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getVencimientocarnesalud($format = 'Y-m-d')
	{
		if ($this->vencimientocarnesalud === null) {
			return null;
		}


		if ($this->vencimientocarnesalud === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->vencimientocarnesalud);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->vencimientocarnesalud, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fechaalta] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaalta($format = 'Y-m-d H:i:s')
	{
		if ($this->fechaalta === null) {
			return null;
		}


		if ($this->fechaalta === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fechaalta);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fechaalta, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fechabaja] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechabaja($format = 'Y-m-d H:i:s')
	{
		if ($this->fechabaja === null) {
			return null;
		}


		if ($this->fechabaja === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fechabaja);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fechabaja, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [habilitado] column value.
	 * 
	 * @return     boolean
	 */
	public function getHabilitado()
	{
		return $this->habilitado;
	}

	/**
	 * Get the [usuario] column value.
	 * 
	 * @return     int
	 */
	public function getUsuario()
	{
		return $this->usuario;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ChoferPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [cedula] column.
	 * 
	 * @param      int $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setCedula($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cedula !== $v) {
			$this->cedula = $v;
			$this->modifiedColumns[] = ChoferPeer::CEDULA;
		}

		return $this;
	} // setCedula()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = ChoferPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [apellidos] column.
	 * 
	 * @param      string $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setApellidos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellidos !== $v) {
			$this->apellidos = $v;
			$this->modifiedColumns[] = ChoferPeer::APELLIDOS;
		}

		return $this;
	} // setApellidos()

	/**
	 * Set the value of [direccion] column.
	 * 
	 * @param      string $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setDireccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion !== $v) {
			$this->direccion = $v;
			$this->modifiedColumns[] = ChoferPeer::DIRECCION;
		}

		return $this;
	} // setDireccion()

	/**
	 * Set the value of [telefono] column.
	 * 
	 * @param      string $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = ChoferPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = ChoferPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = ChoferPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Sets the value of [vencimientolibretaconducir] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setVencimientolibretaconducir($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->vencimientolibretaconducir !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->vencimientolibretaconducir !== null && $tmpDt = new DateTime($this->vencimientolibretaconducir)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->vencimientolibretaconducir = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = ChoferPeer::VENCIMIENTOLIBRETACONDUCIR;
			}
		} // if either are not null

		return $this;
	} // setVencimientolibretaconducir()

	/**
	 * Sets the value of [vencimientocarnesalud] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setVencimientocarnesalud($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->vencimientocarnesalud !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->vencimientocarnesalud !== null && $tmpDt = new DateTime($this->vencimientocarnesalud)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->vencimientocarnesalud = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = ChoferPeer::VENCIMIENTOCARNESALUD;
			}
		} // if either are not null

		return $this;
	} // setVencimientocarnesalud()

	/**
	 * Sets the value of [fechaalta] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setFechaalta($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fechaalta !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fechaalta !== null && $tmpDt = new DateTime($this->fechaalta)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fechaalta = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ChoferPeer::FECHAALTA;
			}
		} // if either are not null

		return $this;
	} // setFechaalta()

	/**
	 * Sets the value of [fechabaja] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setFechabaja($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fechabaja !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fechabaja !== null && $tmpDt = new DateTime($this->fechabaja)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fechabaja = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ChoferPeer::FECHABAJA;
			}
		} // if either are not null

		return $this;
	} // setFechabaja()

	/**
	 * Set the value of [habilitado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setHabilitado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->habilitado !== $v || $this->isNew()) {
			$this->habilitado = $v;
			$this->modifiedColumns[] = ChoferPeer::HABILITADO;
		}

		return $this;
	} // setHabilitado()

	/**
	 * Set the value of [usuario] column.
	 * 
	 * @param      int $v new value
	 * @return     Chofer The current object (for fluent API support)
	 */
	public function setUsuario($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usuario !== $v) {
			$this->usuario = $v;
			$this->modifiedColumns[] = ChoferPeer::USUARIO;
		}

		if ($this->aUsuarioRelatedByUsuario !== null && $this->aUsuarioRelatedByUsuario->getId() !== $v) {
			$this->aUsuarioRelatedByUsuario = null;
		}

		return $this;
	} // setUsuario()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->habilitado !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->cedula = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->nombre = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->apellidos = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->direccion = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->telefono = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->celular = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->vencimientolibretaconducir = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->vencimientocarnesalud = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->fechaalta = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->fechabaja = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->habilitado = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->usuario = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = ChoferPeer::NUM_COLUMNS - ChoferPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Chofer object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aUsuarioRelatedByUsuario !== null && $this->usuario !== $this->aUsuarioRelatedByUsuario->getId()) {
			$this->aUsuarioRelatedByUsuario = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ChoferPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ChoferPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUsuarioRelatedByUsuario = null;
			$this->collMultas = null;
			$this->lastMultaCriteria = null;

			$this->collAccidentes = null;
			$this->lastAccidenteCriteria = null;

			$this->collRecaudacions = null;
			$this->lastRecaudacionCriteria = null;

			$this->collAdelantos = null;
			$this->lastAdelantoCriteria = null;

			$this->collChoferEmpresas = null;
			$this->lastChoferEmpresaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ChoferPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseChofer:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ChoferPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseChofer:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ChoferPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseChofer:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseChofer:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ChoferPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUsuarioRelatedByUsuario !== null) {
				if ($this->aUsuarioRelatedByUsuario->isModified() || $this->aUsuarioRelatedByUsuario->isNew()) {
					$affectedRows += $this->aUsuarioRelatedByUsuario->save($con);
				}
				$this->setUsuarioRelatedByUsuario($this->aUsuarioRelatedByUsuario);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ChoferPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ChoferPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ChoferPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collMultas !== null) {
				foreach ($this->collMultas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAccidentes !== null) {
				foreach ($this->collAccidentes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRecaudacions !== null) {
				foreach ($this->collRecaudacions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAdelantos !== null) {
				foreach ($this->collAdelantos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collChoferEmpresas !== null) {
				foreach ($this->collChoferEmpresas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUsuarioRelatedByUsuario !== null) {
				if (!$this->aUsuarioRelatedByUsuario->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsuarioRelatedByUsuario->getValidationFailures());
				}
			}


			if (($retval = ChoferPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collMultas !== null) {
					foreach ($this->collMultas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAccidentes !== null) {
					foreach ($this->collAccidentes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRecaudacions !== null) {
					foreach ($this->collRecaudacions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAdelantos !== null) {
					foreach ($this->collAdelantos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collChoferEmpresas !== null) {
					foreach ($this->collChoferEmpresas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ChoferPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCedula();
				break;
			case 2:
				return $this->getNombre();
				break;
			case 3:
				return $this->getApellidos();
				break;
			case 4:
				return $this->getDireccion();
				break;
			case 5:
				return $this->getTelefono();
				break;
			case 6:
				return $this->getCelular();
				break;
			case 7:
				return $this->getEmail();
				break;
			case 8:
				return $this->getVencimientolibretaconducir();
				break;
			case 9:
				return $this->getVencimientocarnesalud();
				break;
			case 10:
				return $this->getFechaalta();
				break;
			case 11:
				return $this->getFechabaja();
				break;
			case 12:
				return $this->getHabilitado();
				break;
			case 13:
				return $this->getUsuario();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ChoferPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCedula(),
			$keys[2] => $this->getNombre(),
			$keys[3] => $this->getApellidos(),
			$keys[4] => $this->getDireccion(),
			$keys[5] => $this->getTelefono(),
			$keys[6] => $this->getCelular(),
			$keys[7] => $this->getEmail(),
			$keys[8] => $this->getVencimientolibretaconducir(),
			$keys[9] => $this->getVencimientocarnesalud(),
			$keys[10] => $this->getFechaalta(),
			$keys[11] => $this->getFechabaja(),
			$keys[12] => $this->getHabilitado(),
			$keys[13] => $this->getUsuario(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ChoferPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCedula($value);
				break;
			case 2:
				$this->setNombre($value);
				break;
			case 3:
				$this->setApellidos($value);
				break;
			case 4:
				$this->setDireccion($value);
				break;
			case 5:
				$this->setTelefono($value);
				break;
			case 6:
				$this->setCelular($value);
				break;
			case 7:
				$this->setEmail($value);
				break;
			case 8:
				$this->setVencimientolibretaconducir($value);
				break;
			case 9:
				$this->setVencimientocarnesalud($value);
				break;
			case 10:
				$this->setFechaalta($value);
				break;
			case 11:
				$this->setFechabaja($value);
				break;
			case 12:
				$this->setHabilitado($value);
				break;
			case 13:
				$this->setUsuario($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ChoferPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCedula($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNombre($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setApellidos($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDireccion($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTelefono($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCelular($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setVencimientolibretaconducir($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setVencimientocarnesalud($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFechaalta($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFechabaja($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setHabilitado($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setUsuario($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ChoferPeer::DATABASE_NAME);

		if ($this->isColumnModified(ChoferPeer::ID)) $criteria->add(ChoferPeer::ID, $this->id);
		if ($this->isColumnModified(ChoferPeer::CEDULA)) $criteria->add(ChoferPeer::CEDULA, $this->cedula);
		if ($this->isColumnModified(ChoferPeer::NOMBRE)) $criteria->add(ChoferPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(ChoferPeer::APELLIDOS)) $criteria->add(ChoferPeer::APELLIDOS, $this->apellidos);
		if ($this->isColumnModified(ChoferPeer::DIRECCION)) $criteria->add(ChoferPeer::DIRECCION, $this->direccion);
		if ($this->isColumnModified(ChoferPeer::TELEFONO)) $criteria->add(ChoferPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(ChoferPeer::CELULAR)) $criteria->add(ChoferPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(ChoferPeer::EMAIL)) $criteria->add(ChoferPeer::EMAIL, $this->email);
		if ($this->isColumnModified(ChoferPeer::VENCIMIENTOLIBRETACONDUCIR)) $criteria->add(ChoferPeer::VENCIMIENTOLIBRETACONDUCIR, $this->vencimientolibretaconducir);
		if ($this->isColumnModified(ChoferPeer::VENCIMIENTOCARNESALUD)) $criteria->add(ChoferPeer::VENCIMIENTOCARNESALUD, $this->vencimientocarnesalud);
		if ($this->isColumnModified(ChoferPeer::FECHAALTA)) $criteria->add(ChoferPeer::FECHAALTA, $this->fechaalta);
		if ($this->isColumnModified(ChoferPeer::FECHABAJA)) $criteria->add(ChoferPeer::FECHABAJA, $this->fechabaja);
		if ($this->isColumnModified(ChoferPeer::HABILITADO)) $criteria->add(ChoferPeer::HABILITADO, $this->habilitado);
		if ($this->isColumnModified(ChoferPeer::USUARIO)) $criteria->add(ChoferPeer::USUARIO, $this->usuario);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ChoferPeer::DATABASE_NAME);

		$criteria->add(ChoferPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Chofer (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCedula($this->cedula);

		$copyObj->setNombre($this->nombre);

		$copyObj->setApellidos($this->apellidos);

		$copyObj->setDireccion($this->direccion);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setCelular($this->celular);

		$copyObj->setEmail($this->email);

		$copyObj->setVencimientolibretaconducir($this->vencimientolibretaconducir);

		$copyObj->setVencimientocarnesalud($this->vencimientocarnesalud);

		$copyObj->setFechaalta($this->fechaalta);

		$copyObj->setFechabaja($this->fechabaja);

		$copyObj->setHabilitado($this->habilitado);

		$copyObj->setUsuario($this->usuario);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getMultas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMulta($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAccidentes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAccidente($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRecaudacions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRecaudacion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAdelantos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAdelanto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getChoferEmpresas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addChoferEmpresa($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Chofer Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ChoferPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ChoferPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Usuario object.
	 *
	 * @param      Usuario $v
	 * @return     Chofer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsuarioRelatedByUsuario(Usuario $v = null)
	{
		if ($v === null) {
			$this->setUsuario(NULL);
		} else {
			$this->setUsuario($v->getId());
		}

		$this->aUsuarioRelatedByUsuario = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Usuario object, it will not be re-added.
		if ($v !== null) {
			$v->addChofer($this);
		}

		return $this;
	}


	/**
	 * Get the associated Usuario object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Usuario The associated Usuario object.
	 * @throws     PropelException
	 */
	public function getUsuarioRelatedByUsuario(PropelPDO $con = null)
	{
		if ($this->aUsuarioRelatedByUsuario === null && ($this->usuario !== null)) {
			$this->aUsuarioRelatedByUsuario = UsuarioPeer::retrieveByPk($this->usuario);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsuarioRelatedByUsuario->addChofers($this);
			 */
		}
		return $this->aUsuarioRelatedByUsuario;
	}

	/**
	 * Clears out the collMultas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMultas()
	 */
	public function clearMultas()
	{
		$this->collMultas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMultas collection (array).
	 *
	 * By default this just sets the collMultas collection to an empty array (like clearcollMultas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMultas()
	{
		$this->collMultas = array();
	}

	/**
	 * Gets an array of Multa objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Chofer has previously been saved, it will retrieve
	 * related Multas from storage. If this Chofer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Multa[]
	 * @throws     PropelException
	 */
	public function getMultas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMultas === null) {
			if ($this->isNew()) {
			   $this->collMultas = array();
			} else {

				$criteria->add(MultaPeer::IDCHOFER, $this->id);

				MultaPeer::addSelectColumns($criteria);
				$this->collMultas = MultaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MultaPeer::IDCHOFER, $this->id);

				MultaPeer::addSelectColumns($criteria);
				if (!isset($this->lastMultaCriteria) || !$this->lastMultaCriteria->equals($criteria)) {
					$this->collMultas = MultaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMultaCriteria = $criteria;
		return $this->collMultas;
	}

	/**
	 * Returns the number of related Multa objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Multa objects.
	 * @throws     PropelException
	 */
	public function countMultas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMultas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MultaPeer::IDCHOFER, $this->id);

				$count = MultaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MultaPeer::IDCHOFER, $this->id);

				if (!isset($this->lastMultaCriteria) || !$this->lastMultaCriteria->equals($criteria)) {
					$count = MultaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMultas);
				}
			} else {
				$count = count($this->collMultas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Multa object to this object
	 * through the Multa foreign key attribute.
	 *
	 * @param      Multa $l Multa
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMulta(Multa $l)
	{
		if ($this->collMultas === null) {
			$this->initMultas();
		}
		if (!in_array($l, $this->collMultas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMultas, $l);
			$l->setChofer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related Multas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getMultasJoinMovil($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMultas === null) {
			if ($this->isNew()) {
				$this->collMultas = array();
			} else {

				$criteria->add(MultaPeer::IDCHOFER, $this->id);

				$this->collMultas = MultaPeer::doSelectJoinMovil($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MultaPeer::IDCHOFER, $this->id);

			if (!isset($this->lastMultaCriteria) || !$this->lastMultaCriteria->equals($criteria)) {
				$this->collMultas = MultaPeer::doSelectJoinMovil($criteria, $con, $join_behavior);
			}
		}
		$this->lastMultaCriteria = $criteria;

		return $this->collMultas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related Multas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getMultasJoinUsuarioRelatedByUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMultas === null) {
			if ($this->isNew()) {
				$this->collMultas = array();
			} else {

				$criteria->add(MultaPeer::IDCHOFER, $this->id);

				$this->collMultas = MultaPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MultaPeer::IDCHOFER, $this->id);

			if (!isset($this->lastMultaCriteria) || !$this->lastMultaCriteria->equals($criteria)) {
				$this->collMultas = MultaPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastMultaCriteria = $criteria;

		return $this->collMultas;
	}

	/**
	 * Clears out the collAccidentes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAccidentes()
	 */
	public function clearAccidentes()
	{
		$this->collAccidentes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAccidentes collection (array).
	 *
	 * By default this just sets the collAccidentes collection to an empty array (like clearcollAccidentes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAccidentes()
	{
		$this->collAccidentes = array();
	}

	/**
	 * Gets an array of Accidente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Chofer has previously been saved, it will retrieve
	 * related Accidentes from storage. If this Chofer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Accidente[]
	 * @throws     PropelException
	 */
	public function getAccidentes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAccidentes === null) {
			if ($this->isNew()) {
			   $this->collAccidentes = array();
			} else {

				$criteria->add(AccidentePeer::IDCHOFER, $this->id);

				AccidentePeer::addSelectColumns($criteria);
				$this->collAccidentes = AccidentePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AccidentePeer::IDCHOFER, $this->id);

				AccidentePeer::addSelectColumns($criteria);
				if (!isset($this->lastAccidenteCriteria) || !$this->lastAccidenteCriteria->equals($criteria)) {
					$this->collAccidentes = AccidentePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAccidenteCriteria = $criteria;
		return $this->collAccidentes;
	}

	/**
	 * Returns the number of related Accidente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Accidente objects.
	 * @throws     PropelException
	 */
	public function countAccidentes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAccidentes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AccidentePeer::IDCHOFER, $this->id);

				$count = AccidentePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AccidentePeer::IDCHOFER, $this->id);

				if (!isset($this->lastAccidenteCriteria) || !$this->lastAccidenteCriteria->equals($criteria)) {
					$count = AccidentePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAccidentes);
				}
			} else {
				$count = count($this->collAccidentes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Accidente object to this object
	 * through the Accidente foreign key attribute.
	 *
	 * @param      Accidente $l Accidente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAccidente(Accidente $l)
	{
		if ($this->collAccidentes === null) {
			$this->initAccidentes();
		}
		if (!in_array($l, $this->collAccidentes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAccidentes, $l);
			$l->setChofer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related Accidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getAccidentesJoinMovil($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAccidentes === null) {
			if ($this->isNew()) {
				$this->collAccidentes = array();
			} else {

				$criteria->add(AccidentePeer::IDCHOFER, $this->id);

				$this->collAccidentes = AccidentePeer::doSelectJoinMovil($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AccidentePeer::IDCHOFER, $this->id);

			if (!isset($this->lastAccidenteCriteria) || !$this->lastAccidenteCriteria->equals($criteria)) {
				$this->collAccidentes = AccidentePeer::doSelectJoinMovil($criteria, $con, $join_behavior);
			}
		}
		$this->lastAccidenteCriteria = $criteria;

		return $this->collAccidentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related Accidentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getAccidentesJoinUsuarioRelatedByUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAccidentes === null) {
			if ($this->isNew()) {
				$this->collAccidentes = array();
			} else {

				$criteria->add(AccidentePeer::IDCHOFER, $this->id);

				$this->collAccidentes = AccidentePeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AccidentePeer::IDCHOFER, $this->id);

			if (!isset($this->lastAccidenteCriteria) || !$this->lastAccidenteCriteria->equals($criteria)) {
				$this->collAccidentes = AccidentePeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastAccidenteCriteria = $criteria;

		return $this->collAccidentes;
	}

	/**
	 * Clears out the collRecaudacions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRecaudacions()
	 */
	public function clearRecaudacions()
	{
		$this->collRecaudacions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRecaudacions collection (array).
	 *
	 * By default this just sets the collRecaudacions collection to an empty array (like clearcollRecaudacions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRecaudacions()
	{
		$this->collRecaudacions = array();
	}

	/**
	 * Gets an array of Recaudacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Chofer has previously been saved, it will retrieve
	 * related Recaudacions from storage. If this Chofer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Recaudacion[]
	 * @throws     PropelException
	 */
	public function getRecaudacions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecaudacions === null) {
			if ($this->isNew()) {
			   $this->collRecaudacions = array();
			} else {

				$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

				RecaudacionPeer::addSelectColumns($criteria);
				$this->collRecaudacions = RecaudacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

				RecaudacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastRecaudacionCriteria) || !$this->lastRecaudacionCriteria->equals($criteria)) {
					$this->collRecaudacions = RecaudacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRecaudacionCriteria = $criteria;
		return $this->collRecaudacions;
	}

	/**
	 * Returns the number of related Recaudacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Recaudacion objects.
	 * @throws     PropelException
	 */
	public function countRecaudacions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRecaudacions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

				$count = RecaudacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

				if (!isset($this->lastRecaudacionCriteria) || !$this->lastRecaudacionCriteria->equals($criteria)) {
					$count = RecaudacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRecaudacions);
				}
			} else {
				$count = count($this->collRecaudacions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Recaudacion object to this object
	 * through the Recaudacion foreign key attribute.
	 *
	 * @param      Recaudacion $l Recaudacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRecaudacion(Recaudacion $l)
	{
		if ($this->collRecaudacions === null) {
			$this->initRecaudacions();
		}
		if (!in_array($l, $this->collRecaudacions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRecaudacions, $l);
			$l->setChofer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related Recaudacions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getRecaudacionsJoinMovil($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecaudacions === null) {
			if ($this->isNew()) {
				$this->collRecaudacions = array();
			} else {

				$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

				$this->collRecaudacions = RecaudacionPeer::doSelectJoinMovil($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

			if (!isset($this->lastRecaudacionCriteria) || !$this->lastRecaudacionCriteria->equals($criteria)) {
				$this->collRecaudacions = RecaudacionPeer::doSelectJoinMovil($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecaudacionCriteria = $criteria;

		return $this->collRecaudacions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related Recaudacions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getRecaudacionsJoinUsuarioRelatedByUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecaudacions === null) {
			if ($this->isNew()) {
				$this->collRecaudacions = array();
			} else {

				$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

				$this->collRecaudacions = RecaudacionPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecaudacionPeer::IDCHOFER, $this->id);

			if (!isset($this->lastRecaudacionCriteria) || !$this->lastRecaudacionCriteria->equals($criteria)) {
				$this->collRecaudacions = RecaudacionPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecaudacionCriteria = $criteria;

		return $this->collRecaudacions;
	}

	/**
	 * Clears out the collAdelantos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAdelantos()
	 */
	public function clearAdelantos()
	{
		$this->collAdelantos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAdelantos collection (array).
	 *
	 * By default this just sets the collAdelantos collection to an empty array (like clearcollAdelantos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAdelantos()
	{
		$this->collAdelantos = array();
	}

	/**
	 * Gets an array of Adelanto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Chofer has previously been saved, it will retrieve
	 * related Adelantos from storage. If this Chofer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Adelanto[]
	 * @throws     PropelException
	 */
	public function getAdelantos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAdelantos === null) {
			if ($this->isNew()) {
			   $this->collAdelantos = array();
			} else {

				$criteria->add(AdelantoPeer::IDCHOFER, $this->id);

				AdelantoPeer::addSelectColumns($criteria);
				$this->collAdelantos = AdelantoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AdelantoPeer::IDCHOFER, $this->id);

				AdelantoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAdelantoCriteria) || !$this->lastAdelantoCriteria->equals($criteria)) {
					$this->collAdelantos = AdelantoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAdelantoCriteria = $criteria;
		return $this->collAdelantos;
	}

	/**
	 * Returns the number of related Adelanto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Adelanto objects.
	 * @throws     PropelException
	 */
	public function countAdelantos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAdelantos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AdelantoPeer::IDCHOFER, $this->id);

				$count = AdelantoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AdelantoPeer::IDCHOFER, $this->id);

				if (!isset($this->lastAdelantoCriteria) || !$this->lastAdelantoCriteria->equals($criteria)) {
					$count = AdelantoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAdelantos);
				}
			} else {
				$count = count($this->collAdelantos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Adelanto object to this object
	 * through the Adelanto foreign key attribute.
	 *
	 * @param      Adelanto $l Adelanto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAdelanto(Adelanto $l)
	{
		if ($this->collAdelantos === null) {
			$this->initAdelantos();
		}
		if (!in_array($l, $this->collAdelantos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAdelantos, $l);
			$l->setChofer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related Adelantos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getAdelantosJoinUsuarioRelatedByUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAdelantos === null) {
			if ($this->isNew()) {
				$this->collAdelantos = array();
			} else {

				$criteria->add(AdelantoPeer::IDCHOFER, $this->id);

				$this->collAdelantos = AdelantoPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AdelantoPeer::IDCHOFER, $this->id);

			if (!isset($this->lastAdelantoCriteria) || !$this->lastAdelantoCriteria->equals($criteria)) {
				$this->collAdelantos = AdelantoPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastAdelantoCriteria = $criteria;

		return $this->collAdelantos;
	}

	/**
	 * Clears out the collChoferEmpresas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addChoferEmpresas()
	 */
	public function clearChoferEmpresas()
	{
		$this->collChoferEmpresas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collChoferEmpresas collection (array).
	 *
	 * By default this just sets the collChoferEmpresas collection to an empty array (like clearcollChoferEmpresas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initChoferEmpresas()
	{
		$this->collChoferEmpresas = array();
	}

	/**
	 * Gets an array of ChoferEmpresa objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Chofer has previously been saved, it will retrieve
	 * related ChoferEmpresas from storage. If this Chofer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ChoferEmpresa[]
	 * @throws     PropelException
	 */
	public function getChoferEmpresas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collChoferEmpresas === null) {
			if ($this->isNew()) {
			   $this->collChoferEmpresas = array();
			} else {

				$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

				ChoferEmpresaPeer::addSelectColumns($criteria);
				$this->collChoferEmpresas = ChoferEmpresaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

				ChoferEmpresaPeer::addSelectColumns($criteria);
				if (!isset($this->lastChoferEmpresaCriteria) || !$this->lastChoferEmpresaCriteria->equals($criteria)) {
					$this->collChoferEmpresas = ChoferEmpresaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastChoferEmpresaCriteria = $criteria;
		return $this->collChoferEmpresas;
	}

	/**
	 * Returns the number of related ChoferEmpresa objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ChoferEmpresa objects.
	 * @throws     PropelException
	 */
	public function countChoferEmpresas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collChoferEmpresas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

				$count = ChoferEmpresaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

				if (!isset($this->lastChoferEmpresaCriteria) || !$this->lastChoferEmpresaCriteria->equals($criteria)) {
					$count = ChoferEmpresaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collChoferEmpresas);
				}
			} else {
				$count = count($this->collChoferEmpresas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ChoferEmpresa object to this object
	 * through the ChoferEmpresa foreign key attribute.
	 *
	 * @param      ChoferEmpresa $l ChoferEmpresa
	 * @return     void
	 * @throws     PropelException
	 */
	public function addChoferEmpresa(ChoferEmpresa $l)
	{
		if ($this->collChoferEmpresas === null) {
			$this->initChoferEmpresas();
		}
		if (!in_array($l, $this->collChoferEmpresas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collChoferEmpresas, $l);
			$l->setChofer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related ChoferEmpresas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getChoferEmpresasJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collChoferEmpresas === null) {
			if ($this->isNew()) {
				$this->collChoferEmpresas = array();
			} else {

				$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

				$this->collChoferEmpresas = ChoferEmpresaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

			if (!isset($this->lastChoferEmpresaCriteria) || !$this->lastChoferEmpresaCriteria->equals($criteria)) {
				$this->collChoferEmpresas = ChoferEmpresaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastChoferEmpresaCriteria = $criteria;

		return $this->collChoferEmpresas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Chofer is new, it will return
	 * an empty collection; or if this Chofer has previously
	 * been saved, it will retrieve related ChoferEmpresas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Chofer.
	 */
	public function getChoferEmpresasJoinUsuarioRelatedByUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ChoferPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collChoferEmpresas === null) {
			if ($this->isNew()) {
				$this->collChoferEmpresas = array();
			} else {

				$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

				$this->collChoferEmpresas = ChoferEmpresaPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ChoferEmpresaPeer::IDCHOFER, $this->id);

			if (!isset($this->lastChoferEmpresaCriteria) || !$this->lastChoferEmpresaCriteria->equals($criteria)) {
				$this->collChoferEmpresas = ChoferEmpresaPeer::doSelectJoinUsuarioRelatedByUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastChoferEmpresaCriteria = $criteria;

		return $this->collChoferEmpresas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collMultas) {
				foreach ((array) $this->collMultas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAccidentes) {
				foreach ((array) $this->collAccidentes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRecaudacions) {
				foreach ((array) $this->collRecaudacions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAdelantos) {
				foreach ((array) $this->collAdelantos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collChoferEmpresas) {
				foreach ((array) $this->collChoferEmpresas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collMultas = null;
		$this->collAccidentes = null;
		$this->collRecaudacions = null;
		$this->collAdelantos = null;
		$this->collChoferEmpresas = null;
			$this->aUsuarioRelatedByUsuario = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseChofer:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseChofer::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseChofer

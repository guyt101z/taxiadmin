<?php

/**
 * Skeleton subclass for performing query and update operations on the 'chofer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Mar 17 11:18:29 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ChoferPeer extends BaseChoferPeer {

    // retorno todos los choferes para el id de usuario pasado
    public static function getChoferesParaUsuario($idUsuario) {
        $criteria = new Criteria();
        $criteria->add(ChoferPeer::USUARIO, $idUsuario);
        $criteria->add(ChoferPeer::HABILITADO, TRUE);
        $choferes = ChoferPeer::doSelect($criteria);
        return $choferes;
    }

    public static function getChoferesParaUsuarioCriteria($idUsuario) {
        $criteria = new Criteria();
        $criteria->add(ChoferPeer::USUARIO, $idUsuario);
        $criteria->add(ChoferPeer::HABILITADO, TRUE);
        return $criteria;
    }

    public static function getChoferesSinRelacionConEmpresa($idEmpresa, $idUsuario) {
        $criteria = new Criteria();
        $criteria->add(ChoferPeer::HABILITADO, TRUE);
        $criteria->add(ChoferPeer::USUARIO, $idUsuario);
        $subSelect = "ID NOT IN (SELECT idChofer FROM chofer_empresa WHERE habilitado = 1 AND idEmpresa = " . $idEmpresa . " AND usuario = " . $idUsuario . ")";
        $criteria->add(ChoferPeer::ID, $subSelect, Criteria::CUSTOM);
        $choferes = ChoferPeer::doSelect($criteria);
        return $choferes;
    }

    // retorna el chofer por la cÃ©dula
    public static function getChofer($ci) {
        $criteria = new Criteria();
        $criteria->setLimit(1);
        $criteria->add(ChoferPeer::CEDULA, $ci);

        $choferes = ChoferPeer::doSelect($criteria);
        return !empty($choferes) > 0 ? $choferes[0] : null;
    }

    public static function getChoferByPK($pk, $idUsuario) {
        $criteria = new Criteria();
        $criteria->setLimit(1);
        $criteria->add(ChoferPeer::ID, $pk);
        $criteria->add(ChoferPeer::USUARIO, $idUsuario);

        $choferes = ChoferPeer::doSelect($criteria);

        return !empty($choferes) > 0 ? $choferes[0] : null;
    }

    public static function getLibretasConducirVencimiento($idUsuario) {
        $criteria = new Criteria();
        $criteria->add(ChoferPeer::USUARIO, $idUsuario);
        $criteria->add(ChoferPeer::HABILITADO, TRUE);
        $criteria->add(ChoferPeer::VENCIMIENTOLIBRETACONDUCIR, time() + 86400 * ConstantesFrontEnd::$CANTIDAD_DIAS_VENCIMIENTOS, Criteria::LESS_THAN);
        $choferes = ChoferPeer::doSelect($criteria);
        return $choferes;
    }

    public static function getCarneSaludVencimiento($idUsuario) {
        $criteria = new Criteria();
        $criteria->add(ChoferPeer::USUARIO, $idUsuario);
        $criteria->add(ChoferPeer::HABILITADO, TRUE);
        $criteria->add(ChoferPeer::VENCIMIENTOCARNESALUD, time() + 86400 * ConstantesFrontEnd::$CANTIDAD_DIAS_VENCIMIENTOS, Criteria::LESS_THAN);
        $choferes = ChoferPeer::doSelect($criteria);
        return $choferes;
    }

}

// ChoferPeer
